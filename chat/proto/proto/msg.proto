syntax = "proto3";

package pb;

option go_package = "./pb;pb";
option java_package = "com.woyue.im";
option java_outer_classname = "PbMsg";
// option objc_class_prefix = "V2_";

import "types.proto";
//import "pb_group.proto";

//=============================================================

//=============================================================
//% {id, lid, sid, tid, fid, os, s, mt, mm, mc}
//% <<MS:42, Fid:35, Tid:35, Sys:1,IdTypes:3, Sid:10, 0:2>>.
message MsgMessageContent{
    bytes mid = 15; //--server generated message id, 16 bytes
//    int64 lid = 1; //the local mid, generated by from-uid
    int32 sid = 2; //--system server id, default 0, not system
//    IdTypes idt = 3; //(IdTypes)tid type: 0 uid, 1 gid
//    int64 tid = 4; //to user/group
//    int64 uid = 5; //
//    IdTypes fidt = 6; //(IdTypes)fid type: 0 uid, 1 gid
//    int64 fid = 7; //the msg from uid
    int32 os = 8; //--os type from
    int32 status = 9; //--os and status for read-count
    int32 total = 10; //--total receiver-count in group
//    int64 gid = 8; //
    int32 mt = 11; //message type
//    int32 mi = 12; //message info
    bytes mm = 13; //message meta
    bytes mc = 14; //message content data
//    repeated int64 ats = 16; //at uids in a group
}


//------------------------------
//attach info for none-name x
message MsgMessageAttachInfo{
    string name = 2; //your name, yes may be group name
}
//send a message to
message MsgMessageToQueryMeta{
    int32 gender = 1; //see pb_types.Genders, 1 male, 2 female
    string name = 4;
    string apns = 5; //apns/push content
}



message MsgMessageEncryption{
    //for encryption
    MsgMessageEncryptions encryption=4;
    int32 multiends = 5; //encryption: default is 0, if 1
    int64 ver = 6; //encryption: the keys-version of other ends
}

message MsgMessageToQuery{
    MsgMessageContent   msg = 1;
    uint64              flags = 3; //control code: 0x01 no offline, see MsgToFlags

    IdTypes idt = 4; //(IdTypes)tid type: 0 uid, 1 gid
    int64 tid = 5 [jstype=JS_STRING]; //to user/group
//    uint64 platforms = 6; //see pb_ids.Platforms, zero is all, and use mail_mobile, other wise use their mail

    int64 mtm = 6; //mtm info, for idt=group
    int64 anonymous = 8; // for idt=group. this is a anonymous group, this must be same as server.anonymous

    MsgMessageToQueryMeta meta = 7;
    //    int64       lid     = 1; //the local lid, generated by from-uid
    //    IdTypes     idt     = 3; //(IdTypes)tid type: 1 uid, 2 gid
    //    int64       tid     = 4; //message to uid
    //    int32       ctrl    = 8; //control code: 0x01 no offline
    //    int32       mt = 10; //message type
    //    int32       mi = 11; //message info
    //    bytes       mm = 12; //message meta
    //    bytes       mc = 13; //message content data
    MsgMessageEncryption encrypt = 14;

    string token = 15;//the token for msg 

    repeated int64 ats = 16 [jstype=JS_STRING]; //for tid=group_id, ats someone, and in the
}

message MsgBiRecallA{
    int64 uid = 2 [jstype=JS_STRING];
    bytes sign = 3;//for vip only?
}
message MsgBiRecallB{
    int64 uid = 2 [jstype=JS_STRING];
}


//mt_forword, 
enum MsgForwordOriginFlags{
    MFOF_None = 0;
    MFOF_GroupIsolate = 4;
}
message MsgForwordOrigin{
    int64 uid = 1 [jstype=JS_STRING];//who send 
    int64 id = 2 [jstype=JS_STRING];//uid or gid
    IdTypes idt = 3;
    int64 flags = 4;//see MsgForwordOriginFlags
    string title = 6;
}

message MsgForwordContent{
    MsgMessageContent msg=2;
    string name = 4;//sender user name
}

enum MsgForwordPatterns{
    MFP_None = 0; //默认合并转发
    MFP_Expand = 1; //展开，单条转发。 客户端按要求改写第一层级的消息MID, mid[23]|0x8
}
message MsgMessageForword{
    MsgForwordPatterns pattern = 4;// 转发模式 
    MsgForwordOrigin org = 5;//
    string src = 6;// if bigger than 1k, make a new MsgMessageForword and empty its's field:msgs
    repeated MsgForwordContent msgs = 7; //
    MsgMessageContent msg = 8;//可空，转发留言
}

message MsgAutoReply{
    bool open = 2;
    int64 expire = 3;
    string txt = 4;//
}

message MsgSetAutoReplyQuery{
    repeated bool open = 2;
    repeated int64 expire = 3;
    repeated string txt = 4;//
}
message MsgSetAutoReplyQueryResponse{
    
}

message MsgGetAutoReplyQuery{
}
message MsgGetAutoReplyQueryResponse{
    MsgAutoReply reply = 4;//
}


enum MsgMessageToQueryResponseStatus{
    MMTQRS_None = 0x00;
    MMTQRS_ErrEncryption = 0x01;
    MMTQRS_AutoReplyClosed = 0x02;
    MMTQRS_Sensitive = 0x04;
}

enum MsgMessageCSInfoFlags{
    MMCIF_None = 0;
    MMCIF_NewCS = 1;
}
message MsgMessageCSInfo{
    ContactInfo cs = 2;//the cs
    int32 flags = 3; //see MsgMessageCSInfoFlags
}

message MsgUidMidInfo{
    bytes mid = 3;  //check tid to get uid
}

message MsgMessageToQueryResponse{
    uint64 status = 3; //see MsgMessageToQueryResponseStatus
    //if encryption
    MsgMessageEncryption encrypt = 14;
    //if ok
    bytes mid = 15; //server generated message id, 16 bytes

    int64 mtm = 6; //mtm info, for idt=group
    int64 anonymous = 8; // for idt=group. this is a anonymous group, this must be same as server.anonymous
//    GroupInfo group = 16;// if idt=group, andalso mtm<group.mtm
    MsgAutoReply reply = 12;//auto reply
    MsgMessageCSInfo cs = 13;//cs info if idt=IT_CustomerService
    repeated MsgUidMidInfo mids = 16;//
    string err = 224; // 0xe0; //this is the err message
}

message MsgMessageToQueryEvent{

}

message EqMsgMessageToEvent{
    MsgMessageContent msg = 7;
}

//=============================================================
//message EqMsgMessageToEventResponse{}
//received/read a message
//received: online one message, offline range[]
//read: one message, range[]
enum MsgReceiptStatus{
    MRS_None = 0;

    //tid call
    MRS_Received = 0x0001; //received one/some/range message
    MRS_ReceivedMine = 0x0003; //received from me by other type of os
    MRS_Read = 0x0002; //read one/some/range message

    //fid call
    MRS_Recall = 0x1001; //recall one message
}
enum MsgReceiptMidTypes{
    MRMT_None = 0;
    MRMT_Mid = 1; //mids[0]
    MRMT_Mids = 2; //all mids
    MRMT_Range = 3; //[mids[0],mids[1]]
}

//enum MsgStatusReceiptQueryFlags{
//    MSRQF_None = 0;
//    MSRQF_ReadAndReceived = 1; //send read status andalso mark as received. set this flag only when offline list done
//    MSRQF_GroupNormal = 2; //this is not a mini-group
//}
enum MsgStatusReceiptUserFlags{
    MSRUF_None = 0;
    MSRUF_Fire = 0x01; //burn after read
}
message MsgStatusReceiptQuery{
    int64 uid = 1 [jstype=JS_STRING];//who receive this event. MRS_Received/MRS_Read: sender, MRS_Recall: receiver, maybe group, if 0 no one will receive the event
    int64 gid = 2 [jstype=JS_STRING]; //if this is a group/live/other message, see idt

    IdTypes idt = 3;

    MsgReceiptStatus status = 4;

    MsgReceiptMidTypes midt = 5;

    uint64 flags = 6; //control code: 0x01 no offline, see MsgToFlags
    bool rr = 8; //MSRQF_ReadAndReceived

    repeated bytes mids = 7;

    int32 ufs = 9; //user flags, see MsgStatusReceiptUserFlags
//    bytes mid = 15;
    GroupRole executor = 15;// your name
}
message MsgStatusReceiptQueryResponse{
    int64 n = 2;
    bytes mid = 7;
}

//message EqMsgStatusReceiptEvent{
//    //online only, for offline, read msg status
//    int64 uid = 1; //who read/or received this msg
//    int32 os = 2; //from os
//    MsgStatusReceiptQuery receipt = 3; //status
//}

//mi=MiMsgStatusReceiptEvent, mc=encode_msg(#'MiMsgStatusReceiptEvent'{})
message MsgStatusReceiptQueryEvent{
    int64 uid = 1 [jstype=JS_STRING];//who receive this event. MRS_Received/MRS_Read: sender, MRS_Recall: receiver, maybe group, if 0 no one will receive the event
    int64 gid = 2 [jstype=JS_STRING]; //if this is a group/live/other message, see idt

    IdTypes idt = 3;

    MsgReceiptStatus status = 4;

    MsgReceiptMidTypes midt = 5;

    uint64 flags = 6; // MSRQF_ReadAndReceived

    repeated bytes mids = 7;

    int32 ufs = 9; //user flags, see MsgStatusReceiptUserFlags
    //    bytes mid = 15;
    GroupRole executor = 15;// your name
}
//=============================================================
//offline message
//=============================================================

enum MsgOfflineQueryTypes{
    MOQT_None = 0;
    MOQT_ToMe = 1;   //send to me
    MOQT_FromMe = 2; //send from me
    MOQT_ToGroup = 3;   //send to group
}
enum MsgOfflineQueryFlags{
    MOQF_None = 0;
    MOQF_SupportBytes = 0x01;
}
message MsgOfflineQuery{

    MsgOfflineQueryTypes qt = 1;
    int32 flags = 2; // MsgOfflineQueryFlags
    int64 id = 3 [jstype=JS_STRING]; // MOQT_ToMe: id=fid, 0 means all; MOQT_FromMe: id=tid, 0 not supported, MOQT_ToGroup: id=gid, 0 not supported

    int32 order = 5; //asc = 0, desc=1
    int32 cnt =  6; //limit
    bytes mida = 8; //start max(mida, <<ctm>>)
    bytes midb = 9; //end midb
}
enum MsgOfflineTypes{
    MOT_None = 0;
    MOT_MsgMessageContent = 1;
    MOT_Bytes = 2;
}
message MsgOfflineQueryResponse{
    MsgOfflineTypes t = 4;//
//    bool more = 6;//maybe more and the mid
    repeated MsgMessageContent msgs = 7; //the messages to query
    repeated bytes data = 8;//MsgMessageContent but in bytes, flags&MOQF_SupportBinary!=0
}


//for CS only. this is same as big group
message MsgUserCustomerServiceOfflineQuery{
    int64 uid = 1 [jstype=JS_STRING]; //who's message
    int32 count = 4; //how may to list
    bytes mid = 7; //max mid
}
message MsgUserCustomerServiceOfflineQueryResponse{
    repeated MsgMessageContent msgs = 7; //the messages to query
}

message MsgUserCustomerServiceMapQuery{
    repeated int64 uid = 3 [jstype=JS_STRING];
}
message MsgUserCustomerServiceMapQueryResponse{
    repeated IdVal data = 3;
}
//=============================================================
//get tid read my message or not
//note: query this one time for one connection
message MsgReadStatusQuery{
    int64 tid = 1 [jstype=JS_STRING]; //
}
message MsgReadStatusQueryResponse{
    bytes mid = 7; //
}
//=============================================================

//voip
//message EqMsgVoipEvent{
//    MsgMessageContent msg = 7;
//}

message MsgVoipAckQuery{
    int64 uid = 2 [jstype=JS_STRING]; //to who
    string ackid = 7;
}
message MsgVoipAckQueryResponse{}
message MsgVoipAckEvent{
    string ackid = 7;
}


//online and voip_push
//try to make a p2p/voip call
//(1)

enum MsgVoipMediaTypes{
    MVMT_none = 0;
    MVMT_video = 0x1;
    MVMT_audio = 0x2;
}


enum MsgVoipInfoFlags{
    MVIF_None = 0;
    MVIF_Sdp = 1;
    MVIF_Ice = 2;
}
message MsgVoipInfo{
    //uid/p2p info
    uint32 mediatypes = 2; //see MsgVoipMediaTypes
    string imei = 3;// the imei id from caller
    string callid = 4; //calling id, for retry, you must have the same callid
    uint32 flags = 5; //MsgVoipInfoFlags
    bytes sdp = 7; //init sdp info
    bytes ice = 6; //ice info for calling
    bytes ud = 8;//user-data, see pb_meta.proto->MsgVoipUserData
}

message MsgVoipAuth{
    int32 grade = 1;//
    string name = 2; //see turn use-auth-secret
    string pwd = 3; //the turn password
    string stun = 4; //stun server host
    string turn = 5;//turn server host
}

message MsgVoipQuery{
    //uid/p2p info
    int32 ver = 1;// old 0, new 1, if old no auth info
    int64 uid = 2 [jstype=JS_STRING]; // the one you wanna call
    MsgVoipInfo info = 3;
    string ackid = 7;
}
message MsgVoipQueryResponse{
    bytes mid = 3;
    MsgVoipAuth auth = 4;//
}
message MsgMsgVoipEvent{
    int64 uid = 2 [jstype=JS_STRING]; //the caller
    MsgVoipQuery query = 3;
    MsgVoipAuth auth = 4;//
}
//(2) accept or refuse
enum MsgVoipApproveTypes{
    MVAT_ok = 0; //ok
    MVAT_refuse = 1;
    MVAT_busy = 2;
}

message MsgVoipAcceptQuery{
    MsgVoipApproveTypes approve  = 1;
    int64 uid = 2 [jstype=JS_STRING]; //the caller
    MsgVoipInfo info = 3;// query info, you have to modify the sdp
    MsgVoipAuth auth = 4;//
    string ackid = 7;
}

message MsgVoipAcceptQueryResponse{
    MsgVoipAuth auth = 4;//
}

message MsgVoipAcceptEvent{
    int64 uid = 2 [jstype=JS_STRING]; //the one who accept or refuse you voip query
    MsgVoipAcceptQuery query = 3; //info
    // MsgVoipAuth auth = 4;//
}

//(3) update sdp
message MsgVoipUpdateSdpQuery{
    int64 uid = 2 [jstype=JS_STRING]; //with who to update the sdp info
    MsgVoipInfo info = 3;
    string ackid = 7;
}

message MsgVoipUpdateSdpQueryResponse{}

message MsgVoipUpdateSdpEvent{
    int64 uid = 2 [jstype=JS_STRING]; //the one who accept or refuse you voip query
    MsgVoipUpdateSdpQuery query = 3; //info
}

//=============================================================
message MsgVoipCancelCallQuery{
    int64 uid = 2 [jstype=JS_STRING]; //with who to update the sdp info
    string ackid = 7;
}

message MsgVoipCancelCallQueryResponse{}

message MsgVoipCancelCallEvent{
    int64 uid = 2 [jstype=JS_STRING]; //the one who accept or refuse you voip query
    MsgVoipCancelCallQuery query = 3; //info
}


enum MsgVoipUpdateSetsFlags{
    MVUSF_None = 0;
    MVUSF_Response = 1;
}

enum MsgVoipUpdateSetsIds{
    MVUSI_None = 0;
    MVUSI_Video2Audio = 0x11;
}

message MsgVoipUpdateSetsQuery{
    int64 uid = 2 [jstype=JS_STRING]; //with who to update the sets info
    int32 flag = 3;//is response for some other update, see MsgVoipUpdateSetsFlags
    MsgVoipUpdateSetsIds i = 4; //id,
    bytes v = 6; //value, corresponding to MsgVoipUpdateSetsIds i
    string ackid = 7;
}
message MsgVoipUpdateSetsQueryResponse{

}
message MsgVoipUpdateSetsQueryEvent{
    int64 uid = 2 [jstype=JS_STRING]; //
    MsgVoipUpdateSetsQuery query = 3;//
}

//=============================================================
////////////////////////////////////////////////////////////
//=============================================================
message MsgDRMsgKeysInfo{
    int64 ver = 2;
    uint64 platform = 3; //see pb_ids.Platforms
    bytes identity = 5;
    bytes signed = 7;
}
message MsgDRMsgKeysUpdateQuery{
    MsgDRMsgKeysInfo key = 5; //identity&signed key
    repeated MsgDRPreKeyInfo keys = 6; //prekeys pool
}

message MsgDRMsgKeysUpdateQueryResponse{
    int64 ver = 2;
}

message MsgDRMsgKeysGetQuery{
    int64 uid = 1 [jstype=JS_STRING];
    uint64 platforms = 2; //see pb_ids.Platforms, zero is all
}

message MsgDRMsgKeysGetQueryResponse{
    repeated MsgDRMsgKeysInfo keys = 7;
}

//-------------------------------------------------------------
message MsgDRPreKeyInfo{
    int64 tid = 2 [jstype=JS_STRING]; //tag id
    bytes key = 7; //prekey

}
message MsgDRPreKeyCreateQuery{
    int64 tid = 2 [jstype=JS_STRING];
    uint64 platform = 3; //see pb_ids.Platforms
    int64 ver = 4; //your keys' version
    repeated MsgDRPreKeyInfo keys = 7;
}

message MsgDRPreKeyCreateQueryResponse{
//    int64 id = 2; //the id, if 0 not found
}

message MsgDRPreKeyGetQuery{
    int64 uid = 2 [jstype=JS_STRING]; //the id of the key, random key from uid
    uint64 platform = 3; //see pb_ids.Platforms
    int64 ver = 4;
}

message MsgDRPreKeyGetQueryResponse{
    MsgDRPreKeyInfo key = 3;
}

//=============================================================

//=============================================================
//normal group msg count and last msg
message MsgGroupMsgInfo{
    int64 gid = 1 [jstype=JS_STRING];
    int64 rmtm = 2;
}
message MsgGroupMsgCountQuery{
    int32 hint = 2; //count of message for every group, hint 1-20?
    int64 tm = 3; //max rmtm-tm
    repeated MsgGroupMsgInfo groups = 4;
}
message MsgGroupMsgCount{
    int64 gid = 1 [jstype=JS_STRING];
    int64 count = 2; //count of msg after rmtm. [0,n] ok, -1 group dismissed, -2 not in group
    bytes mid = 3; //the min-mid you get
    repeated  MsgMessageContent msg = 4;
    MsgOfflineTypes t = 5;//
    repeated bytes data = 8;//in binary
}
message MsgGroupMsgCountQueryResponse{
    int32 hint = 2; //
    repeated MsgGroupMsgCount data = 4;
    repeated int64 failed = 5; //failed gids
}

//=============================================================
enum MsgBilateralRecallFlags{
    MBRF_None = 0;
    MBRF_All = 1; //for group root/admin only
}

enum MsgBilateralRecallNegotiationStatus{
    MBRBS_None = 0;
    MBRBS_Wait = 1;
    MBRBS_OK = 2;
    MBRBS_Refuse = 3;
}
//if no nego, try to check friend
message MsgBilateralRecallNegotiation{
    MsgBilateralRecallNegotiationStatus status = 3;
    bytes mid = 4;
    bytes key = 5;//
}
message MsgBilateralRecallQuery{
    int64 id = 1 [jstype=JS_STRING];
    uint64 flags = 3; //control code: 0x01 no offline, see MsgToFlags
    IdTypes idt = 4;
    bool all = 5; //bit or MsgBilateralRecallFlags
    int32 ver = 6;//
    MidRange range = 7;

    MsgBilateralRecallNegotiation nego = 8; //if this is valid, just send recall-event,

    GroupRole executor = 14;// your name
    GroupRole executee = 15;// your name
}
message MsgBilateralRecallQueryResponse{
    int64 n = 2;
    bytes mid = 7;

    MsgBilateralRecallNegotiation nego = 8;
}
message MsgBilateralRecallQueryEvent{
    int64 n = 2;
    int64 id = 1 [jstype=JS_STRING];
    uint64 flags = 3; //control code: 0x01 no offline, see MsgToFlags
    IdTypes idt = 4;
    bool all = 5; //bit or MsgBilateralRecallFlags
    int32 ver = 6;//
    MidRange range = 7;

    MsgBilateralRecallNegotiation nego = 8;

    GroupRole executor = 14;// your name
    GroupRole executee = 15;// your name
}

//=============================================================
//http
//message MsgGroupMsgListQuery{
//    int64 gid = 1;
//
//}
//message MsgGroupMsgListQueryResponse{
//
//}
message RobotHelpMessageInfo{
    int32 code = 2;//
    string cmd = 3;
    int32 mt = 11; //message type
    //    int32 mi = 12; //message info
    bytes mm = 13; //message meta
    bytes mc = 14; //message content data
}
message RobotHelpMessage{
    string language = 2;// internal language
    string help = 3;
    repeated RobotHelpMessageInfo cmds = 5;//
}
message RobotMessageQuery{
    int32 os = 1;//os types
    string language = 2;//language
}
message RobotMessageQueryResponse{
    RobotHelpMessage help = 3;
}
//=============================================================